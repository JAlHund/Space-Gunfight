local score = {
	left_player = 0,
	right_player = 0
}

local borders = {
	min_x = -50,
	max_x = 1330,
	min_y = 0,
	max_y = 770
}

local function respawn()
	local r = vmath.quat_rotation_z(0)

	local left_player_pos = vmath.vector3(360, 360, 0)
	local right_player_pos = vmath.vector3(960, 360, 0)

	msg.post("/left_player#collisionobject", "disable")
	msg.post("/right_player#collisionobject", "disable")
	go.set_position(left_player_pos, "/left_player")
	go.set_rotation(r, "/left_player")
	go.set_position(right_player_pos, "/right_player")
	go.set_rotation(r, "/right_player")
	timer.delay(0.5, false, function()
		msg.post("/left_player#collisionobject", "enable")
		msg.post("/right_player#collisionobject", "enable")
	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	sprite.set_constant("/background#sprite", "tint", vmath.vector4(0.5, 0.5, 0.5, 1))
end

function update(self, dt)
	local left_player_pos = go.get_position("/left_player")
	if left_player_pos.x < borders.min_x or left_player_pos.x > borders.max_x or
	left_player_pos.y < borders.min_y or left_player_pos.y > borders.max_y then
		score.right_player = score.right_player + 1
		msg.post("/interface#interface", "update_score", {
			left_player = score.left_player,
			right_player = score.right_player,
		})
		respawn()
	end
	local right_player_pos = go.get_position("/right_player")
	if right_player_pos.x < borders.min_x or right_player_pos.x > borders.max_x or
	right_player_pos.y < borders.min_y or right_player_pos.y > borders.max_y then
		score.left_player = score.left_player + 1
		msg.post("/interface#interface", "update_score", {
			left_player = score.left_player,
			right_player = score.right_player,
		})
		respawn()
	end
end

local input_configuration = {
	left_player = {
		left = hash("left"),
		right = hash("right"),
		up = hash("up"),
		down = hash("down"),
		attack = hash("attack")
	},
	right_player = {
		left = hash("left2"),
		right = hash("right2"),
		up = hash("up2"),
		down = hash("down2"),
		attack = hash("attack2")
	}
}

function on_input(self, action_id, action)
	-- May be needed
	-- if action_id == hash("r") and action.pressed then
	-- 	respawn()
	-- end
	if action_id then
		for k, v in pairs(input_configuration.left_player) do
			if action_id == v then
				msg.post("/left_player", k, {
					pressed = action.pressed,
					repeated = action.repeated,
					released = action.released,
					is_left = true
				})
			end
		end
		for k, v in pairs(input_configuration.right_player) do
			if action_id == v then
				print("send message to right player:", k, v)
				msg.post("/right_player#character_script", k, {
					pressed = action.pressed,
					repeated = action.repeated,
					released = action.released
				})
			end
		end
	end
end